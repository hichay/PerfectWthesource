{
  "version": 3,
  "sources": ["../../@neodrag/svelte/src/memoize.js", "../../@neodrag/svelte/src/index.ts"],
  "sourcesContent": ["//\n// Code from `fast-memoize`\n//\n\nfunction memoize(fn, options) {\n\tvar cache = options?.cache ?? cacheDefault;\n\tvar serializer = options?.serializer ?? serializerDefault;\n\tvar strategy = options?.strategy ?? strategyDefault;\n\n\treturn strategy(fn, {\n\t\tcache: cache,\n\t\tserializer: serializer,\n\t});\n}\n\n//\n// Strategy\n//\n\nfunction isPrimitive(value) {\n\treturn value == null || typeof value === 'number' || typeof value === 'boolean'; // || typeof value === \"string\" 'unsafe' primitive for our needs\n}\n\nfunction monadic(fn, cache, serializer, arg) {\n\tvar cacheKey = isPrimitive(arg) ? arg : serializer(arg);\n\n\tvar computedValue = cache.get(cacheKey);\n\tif (typeof computedValue === 'undefined') {\n\t\tcomputedValue = fn.call(this, arg);\n\t\tcache.set(cacheKey, computedValue);\n\t}\n\n\treturn computedValue;\n}\n\nfunction variadic(fn, cache, serializer) {\n\tvar args = Array.prototype.slice.call(arguments, 3);\n\tvar cacheKey = serializer(args);\n\n\tvar computedValue = cache.get(cacheKey);\n\tif (typeof computedValue === 'undefined') {\n\t\tcomputedValue = fn.apply(this, args);\n\t\tcache.set(cacheKey, computedValue);\n\t}\n\n\treturn computedValue;\n}\n\nfunction assemble(fn, context, strategy, cache, serialize) {\n\treturn strategy.bind(context, fn, cache, serialize);\n}\n\nfunction strategyDefault(fn, options) {\n\tvar strategy = fn.length === 1 ? monadic : variadic;\n\n\treturn assemble(fn, this, strategy, options.cache.create(), options.serializer);\n}\n\nfunction strategyVariadic(fn, options) {\n\tvar strategy = variadic;\n\n\treturn assemble(fn, this, strategy, options.cache.create(), options.serializer);\n}\n\nfunction strategyMonadic(fn, options) {\n\tvar strategy = monadic;\n\n\treturn assemble(fn, this, strategy, options.cache.create(), options.serializer);\n}\n\n//\n// Serializer\n//\n\nconst serializerDefault = JSON.stringify;\n\n//\n// Cache\n//\n\nfunction ObjectWithoutPrototypeCache() {\n\tthis.cache = Object.create(null);\n}\n\nObjectWithoutPrototypeCache.prototype.has = function (key) {\n\treturn key in this.cache;\n};\n\nObjectWithoutPrototypeCache.prototype.get = function (key) {\n\treturn this.cache[key];\n};\n\nObjectWithoutPrototypeCache.prototype.set = function (key, value) {\n\tthis.cache[key] = value;\n};\n\nvar cacheDefault = {\n\tcreate: function create() {\n\t\treturn new ObjectWithoutPrototypeCache();\n\t},\n};\n\n//\n// API\n//\n\nexport default memoize;\nexport const strategies = {\n\tvariadic: strategyVariadic,\n\tmonadic: strategyMonadic,\n};\n", "import memoize from './memoize';\n\nexport type DragBoundsCoords = {\n\t/** Number of pixels from left of the document */\n\tleft: number;\n\n\t/** Number of pixels from top of the document */\n\ttop: number;\n\n\t/** Number of pixels from the right side of document */\n\tright: number;\n\n\t/** Number of pixels from the bottom of the document */\n\tbottom: number;\n};\n\nexport type DragAxis = 'both' | 'x' | 'y' | 'none';\n\nexport type DragBounds =\n\t| HTMLElement\n\t| Partial<DragBoundsCoords>\n\t| 'parent'\n\t| 'body'\n\t| (string & Record<never, never>);\n\nexport type DragOptions = {\n\t/**\n\t * Optionally limit the drag area\n\t *\n\t * Accepts `parent` as prefixed value, and limits it to its parent.\n\t *\n\t * Or, you can specify any selector and it will be bound to that.\n\t *\n\t * **Note**: We don't check whether the selector is bigger than the node element.\n\t * You yourself will have to make sure of that, or it may lead to strange behavior\n\t *\n\t * Or, finally, you can pass an object of type `{ top: number; right: number; bottom: number; left: number }`.\n\t * These mimic the css `top`, `right`, `bottom` and `left`, in the sense that `bottom` starts from the bottom of the window, and `right` from right of window.\n\t * If any of these properties are unspecified, they are assumed to be `0`.\n\t */\n\tbounds?: DragBounds;\n\n\t/**\n\t * Axis on which the element can be dragged on. Valid values: `both`, `x`, `y`, `none`.\n\t *\n\t * - `both` - Element can move in any direction\n\t * - `x` - Only horizontal movement possible\n\t * - `y` - Only vertical movement possible\n\t * - `none` - No movement at all\n\t *\n\t * @default 'both'\n\t */\n\taxis?: DragAxis;\n\n\t/**\n\t * If true, uses `translate3d` instead of `translate` to move the element around, and the hardware acceleration kicks in.\n\t *\n\t * `true` by default, but can be set to `false` if [blurry text issue](https://developpaper.com/question/why-does-the-use-of-css3-translate3d-result-in-blurred-display/) occur\n\t *\n\t * @default true\n\t */\n\tgpuAcceleration?: boolean;\n\n\t/**\n\t * Applies `user-select: none` on `<body />` element when dragging,\n\t * to prevent the irritating effect where dragging doesn't happen and the text is selected.\n\t * Applied when dragging starts and removed when it stops.\n\t *\n\t * Can be disabled using this option\n\t *\n\t * @default true\n\t */\n\tapplyUserSelectHack?: boolean;\n\n\t/**\n\t * Ignores touch events with more than 1 touch.\n\t * This helps when you have multiple elements on a canvas where you want to implement\n\t * pinch-to-zoom behaviour.\n\t *\n\t * @default false\n\t *\n\t */\n\tignoreMultitouch?: boolean;\n\n\t/**\n\t * Disables dragging altogether.\n\t *\n\t * @default false\n\t */\n\tdisabled?: boolean;\n\n\t/**\n\t * Applies a grid on the page to which the element snaps to when dragging, rather than the default continuous grid.\n\t *\n\t * `Note`: If you're programmatically creating the grid, do not set it to [0, 0] ever, that will stop drag at all. Set it to `undefined`.\n\t *\n\t * @default undefined\n\t */\n\tgrid?: [number, number];\n\n\t/**\n\t * Control the position manually with your own state\n\t *\n\t * By default, the element will be draggable by mouse/finger, and all options will work as default while dragging.\n\t *\n\t * But changing the `position` option will also move the draggable around. These parameters are reactive,\n\t * so using Svelte's reactive variables as values for position will work like a charm.\n\t *\n\t *\n\t * Note: If you set `disabled: true`, you'll still be able to move the draggable through state variables. Only the user interactions won't work\n\t *\n\t */\n\tposition?: { x: number; y: number };\n\n\t/**\n\t * CSS Selector of an element inside the parent node(on which `use:draggable` is applied).\n\t *\n\t * If it is provided, Trying to drag inside the `cancel` selector will prevent dragging.\n\t *\n\t * @default undefined\n\t */\n\tcancel?: string | HTMLElement;\n\n\t/**\n\t * CSS Selector of an element inside the parent node(on which `use:draggable` is applied).\n\t *\n\t * If it is provided, Only clicking and dragging on this element will allow the parent to drag, anywhere else on the parent won't work.\n\t *\n\t * @default undefined\n\t */\n\thandle?: string | HTMLElement;\n\n\t/**\n\t * Class to apply on the element on which `use:draggable` is applied.\n\t * Note that if `handle` is provided, it will still apply class on the element to which this action is applied, **NOT** the handle\n\t *\n\t * neodrag'\n\t */\n\tdefaultClass?: string;\n\n\t/**\n\t * Class to apply on the element when it is dragging\n\t *\n\t * @default 'neodrag-dragging'\n\t */\n\tdefaultClassDragging?: string;\n\n\t/**\n\t * Class to apply on the element if it has been dragged at least once.\n\t *\n\t * @default 'neodrag-dragged'\n\t */\n\tdefaultClassDragged?: string;\n\n\t/**\n\t * Offsets your element to the position you specify in the very beginning.\n\t * `x` and `y` should be in pixels\n\t *\n\t */\n\tdefaultPosition?: { x: number; y: number };\n\n\t/**\n\t * Fires when dragging start\n\t */\n\tonDragStart?: (data: { offsetX: number; offsetY: number; domRect: DOMRect }) => void;\n\n\t/**\n\t * Fires when dragging is going on\n\t */\n\tonDrag?: (data: { offsetX: number; offsetY: number; domRect: DOMRect }) => void;\n\n\t/**\n\t * Fires when dragging ends\n\t */\n\tonDragEnd?: (data: { offsetX: number; offsetY: number; domRect: DOMRect }) => void;\n};\n\nconst enum DEFAULT_CLASS {\n\tMAIN = 'neodrag',\n\tDRAGGING = 'neodrag-dragging',\n\tDRAGGED = 'neodrag-dragged',\n}\n\nexport const draggable = (node: HTMLElement, options: DragOptions = {}) => {\n\tlet {\n\t\tbounds,\n\t\taxis = 'both',\n\t\tgpuAcceleration = true,\n\t\tapplyUserSelectHack = true,\n\t\tdisabled = false,\n\t\tignoreMultitouch = false,\n\n\t\tgrid,\n\n\t\tposition,\n\n\t\tcancel,\n\t\thandle,\n\n\t\tdefaultClass = DEFAULT_CLASS.MAIN,\n\t\tdefaultClassDragging = DEFAULT_CLASS.DRAGGING,\n\t\tdefaultClassDragged = DEFAULT_CLASS.DRAGGED,\n\n\t\tdefaultPosition = { x: 0, y: 0 },\n\n\t\tonDragStart,\n\t\tonDrag,\n\t\tonDragEnd,\n\t} = options;\n\n\tconst tick = new Promise(requestAnimationFrame);\n\n\tlet active = false;\n\n\tlet translateX = 0,\n\t\ttranslateY = 0;\n\n\tlet initialX = 0,\n\t\tinitialY = 0;\n\n\t// The offset of the client position relative to the node's top-left corner\n\tlet clientToNodeOffsetX = 0,\n\t\tclientToNodeOffsetY = 0;\n\n\tlet { x: xOffset, y: yOffset } = position\n\t\t? { x: position?.x ?? 0, y: position?.y ?? 0 }\n\t\t: defaultPosition;\n\n\tsetTranslate(xOffset, yOffset, node, gpuAcceleration);\n\n\tlet canMoveInX: boolean;\n\tlet canMoveInY: boolean;\n\n\tlet bodyOriginalUserSelectVal = '';\n\n\tlet computedBounds: DragBoundsCoords;\n\tlet nodeRect: DOMRect;\n\n\tlet dragEl: HTMLElement | undefined;\n\tlet cancelEl: HTMLElement | undefined;\n\n\tlet isControlled = !!position;\n\n\t// Arbitrary constants for better minification\n\tconst bodyStyle = document.body.style;\n\tconst nodeClassList = node.classList;\n\n\tconst getEventData = () => ({\n\t\toffsetX: translateX,\n\t\toffsetY: translateY,\n\t\tdomRect: node.getBoundingClientRect(),\n\t});\n\n\tconst callEvent = (eventName: 'neodrag:start' | 'neodrag' | 'neodrag:end', fn: typeof onDrag) => {\n\t\tconst data = getEventData();\n\t\tnode.dispatchEvent(new CustomEvent(eventName, { detail: data }));\n\t\tfn?.(data);\n\t};\n\n\tfunction fireSvelteDragStartEvent() {\n\t\tcallEvent('neodrag:start', onDragStart);\n\t}\n\n\tfunction fireSvelteDragEndEvent() {\n\t\tcallEvent('neodrag:end', onDragEnd);\n\t}\n\n\tfunction fireSvelteDragEvent() {\n\t\tcallEvent('neodrag', onDrag);\n\t}\n\n\tconst listen = addEventListener;\n\n\tlisten('touchstart', dragStart, false);\n\tlisten('touchend', dragEnd, false);\n\tlisten('touchmove', drag, false);\n\n\tlisten('mousedown', dragStart, false);\n\tlisten('mouseup', dragEnd, false);\n\tlisten('mousemove', drag, false);\n\n\t// On mobile, touch can become extremely janky without it\n\tnode.style.touchAction = 'none';\n\n\tconst calculateInverseScale = () => {\n\t\t// Calculate the current scale of the node\n\t\tlet inverseScale = node.offsetWidth / nodeRect.width;\n\t\tif (isNaN(inverseScale)) inverseScale = 1;\n\t\treturn inverseScale;\n\t};\n\n\tfunction dragStart(e: TouchEvent | MouseEvent) {\n\t\tif (disabled) return;\n\t\tif (ignoreMultitouch && e.type === 'touchstart' && (e as TouchEvent).touches.length > 1) return;\n\n\t\tnodeClassList.add(defaultClass);\n\n\t\tdragEl = getHandleEl(handle, node);\n\t\tcancelEl = getCancelElement(cancel, node);\n\n\t\tcanMoveInX = /(both|x)/.test(axis);\n\t\tcanMoveInY = /(both|y)/.test(axis);\n\n\t\t// Compute bounds\n\t\tif (typeof bounds !== 'undefined') {\n\t\t\tcomputedBounds = computeBoundRect(bounds, node);\n\t\t}\n\n\t\t// Compute current node's bounding client Rectangle\n\t\tnodeRect = node.getBoundingClientRect();\n\n\t\tif (isString(handle) && isString(cancel) && handle === cancel)\n\t\t\tthrow new Error(\"`handle` selector can't be same as `cancel` selector\");\n\n\t\tif (cancelEl?.contains(dragEl))\n\t\t\tthrow new Error(\n\t\t\t\t\"Element being dragged can't be a child of the element on which `cancel` is applied\"\n\t\t\t);\n\n\t\tif (dragEl.contains(<HTMLElement>e.target) && !cancelEl?.contains(<HTMLElement>e.target))\n\t\t\tactive = true;\n\n\t\tif (!active) return;\n\n\t\tif (applyUserSelectHack) {\n\t\t\t// Apply user-select: none on body to prevent misbehavior\n\t\t\tbodyOriginalUserSelectVal = bodyStyle.userSelect;\n\t\t\tbodyStyle.userSelect = 'none';\n\t\t}\n\n\t\t// Dispatch custom event\n\t\tfireSvelteDragStartEvent();\n\n\t\tconst { clientX, clientY } = isTouchEvent(e) ? e.touches[0] : e;\n\t\tconst inverseScale = calculateInverseScale();\n\n\t\tif (canMoveInX) initialX = clientX - xOffset / inverseScale;\n\t\tif (canMoveInY) initialY = clientY - yOffset / inverseScale;\n\n\t\t// Only the bounds uses these properties at the moment,\n\t\t// may open up in the future if others need it\n\t\tif (computedBounds) {\n\t\t\tclientToNodeOffsetX = clientX - nodeRect.left;\n\t\t\tclientToNodeOffsetY = clientY - nodeRect.top;\n\t\t}\n\t}\n\n\tfunction dragEnd() {\n\t\tif (!active) return;\n\n\t\t// Apply class defaultClassDragged\n\t\tnodeClassList.remove(defaultClassDragging);\n\t\tnodeClassList.add(defaultClassDragged);\n\n\t\tif (applyUserSelectHack) bodyStyle.userSelect = bodyOriginalUserSelectVal;\n\n\t\tfireSvelteDragEndEvent();\n\n\t\tif (canMoveInX) initialX = translateX;\n\t\tif (canMoveInX) initialY = translateY;\n\n\t\tactive = false;\n\t}\n\n\tfunction drag(e: TouchEvent | MouseEvent) {\n\t\tif (!active) return;\n\n\t\t// Apply class defaultClassDragging\n\t\tnodeClassList.add(defaultClassDragging);\n\n\t\te.preventDefault();\n\n\t\tnodeRect = node.getBoundingClientRect();\n\n\t\tconst { clientX, clientY } = isTouchEvent(e) ? e.touches[0] : e;\n\n\t\t// Get final values for clamping\n\t\tlet finalX = clientX,\n\t\t\tfinalY = clientY;\n\n\t\tconst inverseScale = calculateInverseScale();\n\n\t\tif (computedBounds) {\n\t\t\t// Client position is limited to this virtual boundary to prevent node going out of bounds\n\t\t\tconst virtualClientBounds: DragBoundsCoords = {\n\t\t\t\tleft: computedBounds.left + clientToNodeOffsetX,\n\t\t\t\ttop: computedBounds.top + clientToNodeOffsetY,\n\t\t\t\tright: computedBounds.right + clientToNodeOffsetX - nodeRect.width,\n\t\t\t\tbottom: computedBounds.bottom + clientToNodeOffsetY - nodeRect.height,\n\t\t\t};\n\n\t\t\tfinalX = clamp(finalX, virtualClientBounds.left, virtualClientBounds.right);\n\t\t\tfinalY = clamp(finalY, virtualClientBounds.top, virtualClientBounds.bottom);\n\t\t}\n\n\t\tif (Array.isArray(grid)) {\n\t\t\tlet [xSnap, ySnap] = grid;\n\n\t\t\tif (isNaN(+xSnap) || xSnap < 0)\n\t\t\t\tthrow new Error('1st argument of `grid` must be a valid positive number');\n\n\t\t\tif (isNaN(+ySnap) || ySnap < 0)\n\t\t\t\tthrow new Error('2nd argument of `grid` must be a valid positive number');\n\n\t\t\tlet deltaX = finalX - initialX,\n\t\t\t\tdeltaY = finalY - initialY;\n\n\t\t\t[deltaX, deltaY] = snapToGrid(\n\t\t\t\t[Math.floor(xSnap / inverseScale), Math.floor(ySnap / inverseScale)],\n\t\t\t\tdeltaX,\n\t\t\t\tdeltaY\n\t\t\t);\n\n\t\t\tfinalX = initialX + deltaX;\n\t\t\tfinalY = initialY + deltaY;\n\t\t}\n\n\t\tif (canMoveInX) translateX = (finalX - initialX) * inverseScale;\n\t\tif (canMoveInY) translateY = (finalY - initialY) * inverseScale;\n\n\t\txOffset = translateX;\n\t\tyOffset = translateY;\n\n\t\tfireSvelteDragEvent();\n\n\t\ttick.then(() => setTranslate(translateX, translateY, node, gpuAcceleration));\n\t\t// Promise.resolve().then(() => setTranslate(translateX, translateY, node, gpuAcceleration));\n\t}\n\n\treturn {\n\t\tdestroy: () => {\n\t\t\tconst unlisten = removeEventListener;\n\n\t\t\tunlisten('touchstart', dragStart, false);\n\t\t\tunlisten('touchend', dragEnd, false);\n\t\t\tunlisten('touchmove', drag, false);\n\n\t\t\tunlisten('mousedown', dragStart, false);\n\t\t\tunlisten('mouseup', dragEnd, false);\n\t\t\tunlisten('mousemove', drag, false);\n\t\t},\n\t\tupdate: (options: DragOptions) => {\n\t\t\t// Update all the values that need to be changed\n\t\t\taxis = options.axis || 'both';\n\t\t\tdisabled = options.disabled ?? false;\n\t\t\tignoreMultitouch = options.ignoreMultitouch ?? false;\n\t\t\thandle = options.handle;\n\t\t\tbounds = options.bounds;\n\t\t\tcancel = options.cancel;\n\t\t\tapplyUserSelectHack = options.applyUserSelectHack ?? true;\n\t\t\tgrid = options.grid;\n\t\t\tgpuAcceleration = options.gpuAcceleration ?? true;\n\n\t\t\tconst dragged = nodeClassList.contains(defaultClassDragged);\n\n\t\t\tnodeClassList.remove(defaultClass, defaultClassDragged);\n\n\t\t\tdefaultClass = options.defaultClass ?? DEFAULT_CLASS.MAIN;\n\t\t\tdefaultClassDragging = options.defaultClassDragging ?? DEFAULT_CLASS.DRAGGING;\n\t\t\tdefaultClassDragged = options.defaultClassDragged ?? DEFAULT_CLASS.DRAGGED;\n\n\t\t\tnodeClassList.add(defaultClass);\n\n\t\t\tif (dragged) nodeClassList.add(defaultClassDragged);\n\n\t\t\tif (isControlled) {\n\t\t\t\txOffset = translateX = options.position?.x ?? translateX;\n\t\t\t\tyOffset = translateY = options.position?.y ?? translateY;\n\n\t\t\t\ttick.then(() => setTranslate(translateX, translateY, node, gpuAcceleration));\n\t\t\t}\n\t\t},\n\t};\n};\n\nconst isTouchEvent = (event: MouseEvent | TouchEvent): event is TouchEvent =>\n\t!!(event as TouchEvent).touches?.length;\n\nconst clamp = (val: number, min: number, max: number) => Math.min(Math.max(val, min), max);\n\nconst isString = (val: unknown): val is string => typeof val === 'string';\n\nconst snapToGrid = memoize(\n\t([xSnap, ySnap]: [number, number], pendingX: number, pendingY: number): [number, number] => {\n\t\tconst calc = (val: number, snap: number) => Math.round(val / snap) * snap;\n\n\t\tconst x = calc(pendingX, xSnap);\n\t\tconst y = calc(pendingY, ySnap);\n\n\t\treturn [x, y];\n\t}\n);\n\nfunction getHandleEl(handle: DragOptions['handle'], node: HTMLElement) {\n\tif (!handle) return node;\n\n\tif (handle instanceof HTMLElement) return handle;\n\n\t// Valid!! Let's check if this selector exists or not\n\tconst handleEl = node.querySelector<HTMLElement>(handle);\n\tif (handleEl === null)\n\t\tthrow new Error(\n\t\t\t'Selector passed for `handle` option should be child of the element on which the action is applied'\n\t\t);\n\n\treturn handleEl!;\n}\n\nfunction getCancelElement(cancel: DragOptions['cancel'], node: HTMLElement) {\n\tif (!cancel) return;\n\n\tif (cancel instanceof HTMLElement) return cancel;\n\n\tconst cancelEl = node.querySelector<HTMLElement>(cancel);\n\n\tif (cancelEl === null)\n\t\tthrow new Error(\n\t\t\t'Selector passed for `cancel` option should be child of the element on which the action is applied'\n\t\t);\n\n\treturn cancelEl;\n}\n\nfunction computeBoundRect(bounds: DragOptions['bounds'], rootNode: HTMLElement) {\n\tif (bounds instanceof HTMLElement) return bounds.getBoundingClientRect();\n\n\tif (typeof bounds === 'object') {\n\t\t// we have the left right etc\n\n\t\tconst { top = 0, left = 0, right = 0, bottom = 0 } = bounds;\n\n\t\tconst computedRight = window.innerWidth - right;\n\t\tconst computedBottom = window.innerHeight - bottom;\n\n\t\treturn { top, right: computedRight, bottom: computedBottom, left };\n\t}\n\n\t// It's a string\n\tif (bounds === 'parent') return (<HTMLElement>rootNode.parentNode).getBoundingClientRect();\n\n\tconst node = document.querySelector<HTMLElement>(<string>bounds);\n\tif (node === null)\n\t\tthrow new Error(\"The selector provided for bound doesn't exists in the document.\");\n\n\tconst computedBounds = node.getBoundingClientRect();\n\treturn computedBounds;\n}\n\nfunction setTranslate(xPos: number, yPos: number, el: HTMLElement, gpuAcceleration: boolean) {\n\tel.style.transform = gpuAcceleration\n\t\t? `translate3d(${+xPos}px, ${+yPos}px, 0)`\n\t\t: `translate(${+xPos}px, ${+yPos}px)`;\n}\n"],
  "mappings": "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",
  "names": []
}
